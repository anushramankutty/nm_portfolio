{"ast":null,"code":"/** @license React v16.6.0\r\n * scheduler.development.js\r\n *\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function () {\n    'use strict';\n\n    Object.defineProperty(exports, '__esModule', {\n      value: true\n    });\n\n    /* eslint-disable no-var */\n\n    // TODO: Use symbols?\n    var ImmediatePriority = 1;\n    var UserBlockingPriority = 2;\n    var NormalPriority = 3;\n    var IdlePriority = 4;\n\n    // Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n    // Math.pow(2, 30) - 1\n    // 0b111111111111111111111111111111\n    var maxSigned31BitInt = 1073741823;\n\n    // Times out immediately\n    var IMMEDIATE_PRIORITY_TIMEOUT = -1;\n    // Eventually times out\n    var USER_BLOCKING_PRIORITY = 250;\n    var NORMAL_PRIORITY_TIMEOUT = 5000;\n    // Never times out\n    var IDLE_PRIORITY = maxSigned31BitInt;\n\n    // Callbacks are stored as a circular, doubly linked list.\n    var firstCallbackNode = null;\n    var currentPriorityLevel = NormalPriority;\n    var currentEventStartTime = -1;\n    var currentExpirationTime = -1;\n\n    // This is set when a callback is being executed, to prevent re-entrancy.\n    var isExecutingCallback = false;\n    var isHostCallbackScheduled = false;\n    var hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\n    var timeRemaining;\n    if (hasNativePerformanceNow) {\n      timeRemaining = function () {\n        if (firstCallbackNode !== null && firstCallbackNode.expirationTime < currentExpirationTime) {\n          // A higher priority callback was scheduled. Yield so we can switch to\n          // working on that.\n          return 0;\n        }\n        // We assume that if we have a performance timer that the rAF callback\n        // gets a performance timer value. Not sure if this is always true.\n        var remaining = getFrameDeadline() - performance.now();\n        return remaining > 0 ? remaining : 0;\n      };\n    } else {\n      timeRemaining = function () {\n        // Fallback to Date.now()\n        if (firstCallbackNode !== null && firstCallbackNode.expirationTime < currentExpirationTime) {\n          return 0;\n        }\n        var remaining = getFrameDeadline() - Date.now();\n        return remaining > 0 ? remaining : 0;\n      };\n    }\n    var deadlineObject = {\n      timeRemaining: timeRemaining,\n      didTimeout: false\n    };\n    function ensureHostCallbackIsScheduled() {\n      if (isExecutingCallback) {\n        // Don't schedule work yet; wait until the next time we yield.\n        return;\n      }\n      // Schedule the host callback using the earliest expiration in the list.\n      var expirationTime = firstCallbackNode.expirationTime;\n      if (!isHostCallbackScheduled) {\n        isHostCallbackScheduled = true;\n      } else {\n        // Cancel the existing host callback.\n        cancelHostCallback();\n      }\n      requestHostCallback(flushWork, expirationTime);\n    }\n    function flushFirstCallback() {\n      var flushedNode = firstCallbackNode;\n\n      // Remove the node from the list before calling the callback. That way the\n      // list is in a consistent state even if the callback throws.\n      var next = firstCallbackNode.next;\n      if (firstCallbackNode === next) {\n        // This is the last callback in the list.\n        firstCallbackNode = null;\n        next = null;\n      } else {\n        var lastCallbackNode = firstCallbackNode.previous;\n        firstCallbackNode = lastCallbackNode.next = next;\n        next.previous = lastCallbackNode;\n      }\n      flushedNode.next = flushedNode.previous = null;\n\n      // Now it's safe to call the callback.\n      var callback = flushedNode.callback;\n      var expirationTime = flushedNode.expirationTime;\n      var priorityLevel = flushedNode.priorityLevel;\n      var previousPriorityLevel = currentPriorityLevel;\n      var previousExpirationTime = currentExpirationTime;\n      currentPriorityLevel = priorityLevel;\n      currentExpirationTime = expirationTime;\n      var continuationCallback;\n      try {\n        continuationCallback = callback(deadlineObject);\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n        currentExpirationTime = previousExpirationTime;\n      }\n\n      // A callback may return a continuation. The continuation should be scheduled\n      // with the same priority and expiration as the just-finished callback.\n      if (typeof continuationCallback === 'function') {\n        var continuationNode = {\n          callback: continuationCallback,\n          priorityLevel: priorityLevel,\n          expirationTime: expirationTime,\n          next: null,\n          previous: null\n        };\n\n        // Insert the new callback into the list, sorted by its expiration. This is\n        // almost the same as the code in `scheduleCallback`, except the callback\n        // is inserted into the list *before* callbacks of equal expiration instead\n        // of after.\n        if (firstCallbackNode === null) {\n          // This is the first callback in the list.\n          firstCallbackNode = continuationNode.next = continuationNode.previous = continuationNode;\n        } else {\n          var nextAfterContinuation = null;\n          var node = firstCallbackNode;\n          do {\n            if (node.expirationTime >= expirationTime) {\n              // This callback expires at or after the continuation. We will insert\n              // the continuation *before* this callback.\n              nextAfterContinuation = node;\n              break;\n            }\n            node = node.next;\n          } while (node !== firstCallbackNode);\n          if (nextAfterContinuation === null) {\n            // No equal or lower priority callback was found, which means the new\n            // callback is the lowest priority callback in the list.\n            nextAfterContinuation = firstCallbackNode;\n          } else if (nextAfterContinuation === firstCallbackNode) {\n            // The new callback is the highest priority callback in the list.\n            firstCallbackNode = continuationNode;\n            ensureHostCallbackIsScheduled();\n          }\n          var previous = nextAfterContinuation.previous;\n          previous.next = nextAfterContinuation.previous = continuationNode;\n          continuationNode.next = nextAfterContinuation;\n          continuationNode.previous = previous;\n        }\n      }\n    }\n    function flushImmediateWork() {\n      if (\n      // Confirm we've exited the outer most event handler\n      currentEventStartTime === -1 && firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority) {\n        isExecutingCallback = true;\n        deadlineObject.didTimeout = true;\n        try {\n          do {\n            flushFirstCallback();\n          } while (\n          // Keep flushing until there are no more immediate callbacks\n          firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority);\n        } finally {\n          isExecutingCallback = false;\n          if (firstCallbackNode !== null) {\n            // There's still work remaining. Request another callback.\n            ensureHostCallbackIsScheduled();\n          } else {\n            isHostCallbackScheduled = false;\n          }\n        }\n      }\n    }\n    function flushWork(didTimeout) {\n      isExecutingCallback = true;\n      deadlineObject.didTimeout = didTimeout;\n      try {\n        if (didTimeout) {\n          // Flush all the expired callbacks without yielding.\n          while (firstCallbackNode !== null) {\n            // Read the current time. Flush all the callbacks that expire at or\n            // earlier than that time. Then read the current time again and repeat.\n            // This optimizes for as few performance.now calls as possible.\n            var currentTime = exports.unstable_now();\n            if (firstCallbackNode.expirationTime <= currentTime) {\n              do {\n                flushFirstCallback();\n              } while (firstCallbackNode !== null && firstCallbackNode.expirationTime <= currentTime);\n              continue;\n            }\n            break;\n          }\n        } else {\n          // Keep flushing callbacks until we run out of time in the frame.\n          if (firstCallbackNode !== null) {\n            do {\n              flushFirstCallback();\n            } while (firstCallbackNode !== null && getFrameDeadline() - exports.unstable_now() > 0);\n          }\n        }\n      } finally {\n        isExecutingCallback = false;\n        if (firstCallbackNode !== null) {\n          // There's still work remaining. Request another callback.\n          ensureHostCallbackIsScheduled();\n        } else {\n          isHostCallbackScheduled = false;\n        }\n        // Before exiting, flush all the immediate work that was scheduled.\n        flushImmediateWork();\n      }\n    }\n    function unstable_runWithPriority(priorityLevel, eventHandler) {\n      switch (priorityLevel) {\n        case ImmediatePriority:\n        case UserBlockingPriority:\n        case NormalPriority:\n        case IdlePriority:\n          break;\n        default:\n          priorityLevel = NormalPriority;\n      }\n      var previousPriorityLevel = currentPriorityLevel;\n      var previousEventStartTime = currentEventStartTime;\n      currentPriorityLevel = priorityLevel;\n      currentEventStartTime = exports.unstable_now();\n      try {\n        return eventHandler();\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n        currentEventStartTime = previousEventStartTime;\n\n        // Before exiting, flush all the immediate work that was scheduled.\n        flushImmediateWork();\n      }\n    }\n    function unstable_wrapCallback(callback) {\n      var parentPriorityLevel = currentPriorityLevel;\n      return function () {\n        // This is a fork of runWithPriority, inlined for performance.\n        var previousPriorityLevel = currentPriorityLevel;\n        var previousEventStartTime = currentEventStartTime;\n        currentPriorityLevel = parentPriorityLevel;\n        currentEventStartTime = exports.unstable_now();\n        try {\n          return callback.apply(this, arguments);\n        } finally {\n          currentPriorityLevel = previousPriorityLevel;\n          currentEventStartTime = previousEventStartTime;\n          flushImmediateWork();\n        }\n      };\n    }\n    function unstable_scheduleCallback(callback, deprecated_options) {\n      var startTime = currentEventStartTime !== -1 ? currentEventStartTime : exports.unstable_now();\n      var expirationTime;\n      if (typeof deprecated_options === 'object' && deprecated_options !== null && typeof deprecated_options.timeout === 'number') {\n        // FIXME: Remove this branch once we lift expiration times out of React.\n        expirationTime = startTime + deprecated_options.timeout;\n      } else {\n        switch (currentPriorityLevel) {\n          case ImmediatePriority:\n            expirationTime = startTime + IMMEDIATE_PRIORITY_TIMEOUT;\n            break;\n          case UserBlockingPriority:\n            expirationTime = startTime + USER_BLOCKING_PRIORITY;\n            break;\n          case IdlePriority:\n            expirationTime = startTime + IDLE_PRIORITY;\n            break;\n          case NormalPriority:\n          default:\n            expirationTime = startTime + NORMAL_PRIORITY_TIMEOUT;\n        }\n      }\n      var newNode = {\n        callback: callback,\n        priorityLevel: currentPriorityLevel,\n        expirationTime: expirationTime,\n        next: null,\n        previous: null\n      };\n\n      // Insert the new callback into the list, ordered first by expiration, then\n      // by insertion. So the new callback is inserted any other callback with\n      // equal expiration.\n      if (firstCallbackNode === null) {\n        // This is the first callback in the list.\n        firstCallbackNode = newNode.next = newNode.previous = newNode;\n        ensureHostCallbackIsScheduled();\n      } else {\n        var next = null;\n        var node = firstCallbackNode;\n        do {\n          if (node.expirationTime > expirationTime) {\n            // The new callback expires before this one.\n            next = node;\n            break;\n          }\n          node = node.next;\n        } while (node !== firstCallbackNode);\n        if (next === null) {\n          // No callback with a later expiration was found, which means the new\n          // callback has the latest expiration in the list.\n          next = firstCallbackNode;\n        } else if (next === firstCallbackNode) {\n          // The new callback has the earliest expiration in the entire list.\n          firstCallbackNode = newNode;\n          ensureHostCallbackIsScheduled();\n        }\n        var previous = next.previous;\n        previous.next = next.previous = newNode;\n        newNode.next = next;\n        newNode.previous = previous;\n      }\n      return newNode;\n    }\n    function unstable_cancelCallback(callbackNode) {\n      var next = callbackNode.next;\n      if (next === null) {\n        // Already cancelled.\n        return;\n      }\n      if (next === callbackNode) {\n        // This is the only scheduled callback. Clear the list.\n        firstCallbackNode = null;\n      } else {\n        // Remove the callback from its position in the list.\n        if (callbackNode === firstCallbackNode) {\n          firstCallbackNode = next;\n        }\n        var previous = callbackNode.previous;\n        previous.next = next;\n        next.previous = previous;\n      }\n      callbackNode.next = callbackNode.previous = null;\n    }\n    function unstable_getCurrentPriorityLevel() {\n      return currentPriorityLevel;\n    }\n\n    // The remaining code is essentially a polyfill for requestIdleCallback. It\n    // works by scheduling a requestAnimationFrame, storing the time for the start\n    // of the frame, then scheduling a postMessage which gets scheduled after paint.\n    // Within the postMessage handler do as much work as possible until time + frame\n    // rate. By separating the idle call into a separate event tick we ensure that\n    // layout, paint and other browser work is counted against the available time.\n    // The frame rate is dynamically adjusted.\n\n    // We capture a local reference to any global, in case it gets polyfilled after\n    // this module is initially evaluated. We want to be using a\n    // consistent implementation.\n    var localDate = Date;\n\n    // This initialization code may run even on server environments if a component\n    // just imports ReactDOM (e.g. for findDOMNode). Some environments might not\n    // have setTimeout or clearTimeout. However, we always expect them to be defined\n    // on the client. https://github.com/facebook/react/pull/13088\n    var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;\n    var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;\n\n    // We don't expect either of these to necessarily be defined, but we will error\n    // later if they are missing on the client.\n    var localRequestAnimationFrame = typeof requestAnimationFrame === 'function' ? requestAnimationFrame : undefined;\n    var localCancelAnimationFrame = typeof cancelAnimationFrame === 'function' ? cancelAnimationFrame : undefined;\n\n    // requestAnimationFrame does not run when the tab is in the background. If\n    // we're backgrounded we prefer for that work to happen so that the page\n    // continues to load in the background. So we also schedule a 'setTimeout' as\n    // a fallback.\n    // TODO: Need a better heuristic for backgrounded work.\n    var ANIMATION_FRAME_TIMEOUT = 100;\n    var rAFID;\n    var rAFTimeoutID;\n    var requestAnimationFrameWithTimeout = function (callback) {\n      // schedule rAF and also a setTimeout\n      rAFID = localRequestAnimationFrame(function (timestamp) {\n        // cancel the setTimeout\n        localClearTimeout(rAFTimeoutID);\n        callback(timestamp);\n      });\n      rAFTimeoutID = localSetTimeout(function () {\n        // cancel the requestAnimationFrame\n        localCancelAnimationFrame(rAFID);\n        callback(exports.unstable_now());\n      }, ANIMATION_FRAME_TIMEOUT);\n    };\n    if (hasNativePerformanceNow) {\n      var Performance = performance;\n      exports.unstable_now = function () {\n        return Performance.now();\n      };\n    } else {\n      exports.unstable_now = function () {\n        return localDate.now();\n      };\n    }\n    var requestHostCallback;\n    var cancelHostCallback;\n    var getFrameDeadline;\n    if (typeof window !== 'undefined' && window._schedMock) {\n      // Dynamic injection, only for testing purposes.\n      var impl = window._schedMock;\n      requestHostCallback = impl[0];\n      cancelHostCallback = impl[1];\n      getFrameDeadline = impl[2];\n    } else if (\n    // If Scheduler runs in a non-DOM environment, it falls back to a naive\n    // implementation using setTimeout.\n    typeof window === 'undefined' ||\n    // \"addEventListener\" might not be available on the window object\n    // if this is a mocked \"window\" object. So we need to validate that too.\n    typeof window.addEventListener !== 'function') {\n      var _callback = null;\n      var _currentTime = -1;\n      var _flushCallback = function (didTimeout, ms) {\n        if (_callback !== null) {\n          var cb = _callback;\n          _callback = null;\n          try {\n            _currentTime = ms;\n            cb(didTimeout);\n          } finally {\n            _currentTime = -1;\n          }\n        }\n      };\n      requestHostCallback = function (cb, ms) {\n        if (_currentTime !== -1) {\n          // Protect against re-entrancy.\n          setTimeout(requestHostCallback, 0, cb, ms);\n        } else {\n          _callback = cb;\n          setTimeout(_flushCallback, ms, true, ms);\n          setTimeout(_flushCallback, maxSigned31BitInt, false, maxSigned31BitInt);\n        }\n      };\n      cancelHostCallback = function () {\n        _callback = null;\n      };\n      getFrameDeadline = function () {\n        return Infinity;\n      };\n      exports.unstable_now = function () {\n        return _currentTime === -1 ? 0 : _currentTime;\n      };\n    } else {\n      if (typeof console !== 'undefined') {\n        // TODO: Remove fb.me link\n        if (typeof localRequestAnimationFrame !== 'function') {\n          console.error(\"This browser doesn't support requestAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\n        }\n        if (typeof localCancelAnimationFrame !== 'function') {\n          console.error(\"This browser doesn't support cancelAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\n        }\n      }\n      var scheduledHostCallback = null;\n      var isMessageEventScheduled = false;\n      var timeoutTime = -1;\n      var isAnimationFrameScheduled = false;\n      var isFlushingHostCallback = false;\n      var frameDeadline = 0;\n      // We start out assuming that we run at 30fps but then the heuristic tracking\n      // will adjust this value to a faster fps if we get more frequent animation\n      // frames.\n      var previousFrameTime = 33;\n      var activeFrameTime = 33;\n      getFrameDeadline = function () {\n        return frameDeadline;\n      };\n\n      // We use the postMessage trick to defer idle work until after the repaint.\n      var messageKey = '__reactIdleCallback$' + Math.random().toString(36).slice(2);\n      var idleTick = function (event) {\n        if (event.source !== window || event.data !== messageKey) {\n          return;\n        }\n        isMessageEventScheduled = false;\n        var prevScheduledCallback = scheduledHostCallback;\n        var prevTimeoutTime = timeoutTime;\n        scheduledHostCallback = null;\n        timeoutTime = -1;\n        var currentTime = exports.unstable_now();\n        var didTimeout = false;\n        if (frameDeadline - currentTime <= 0) {\n          // There's no time left in this idle period. Check if the callback has\n          // a timeout and whether it's been exceeded.\n          if (prevTimeoutTime !== -1 && prevTimeoutTime <= currentTime) {\n            // Exceeded the timeout. Invoke the callback even though there's no\n            // time left.\n            didTimeout = true;\n          } else {\n            // No timeout.\n            if (!isAnimationFrameScheduled) {\n              // Schedule another animation callback so we retry later.\n              isAnimationFrameScheduled = true;\n              requestAnimationFrameWithTimeout(animationTick);\n            }\n            // Exit without invoking the callback.\n            scheduledHostCallback = prevScheduledCallback;\n            timeoutTime = prevTimeoutTime;\n            return;\n          }\n        }\n        if (prevScheduledCallback !== null) {\n          isFlushingHostCallback = true;\n          try {\n            prevScheduledCallback(didTimeout);\n          } finally {\n            isFlushingHostCallback = false;\n          }\n        }\n      };\n      // Assumes that we have addEventListener in this environment. Might need\n      // something better for old IE.\n      window.addEventListener('message', idleTick, false);\n      var animationTick = function (rafTime) {\n        if (scheduledHostCallback !== null) {\n          // Eagerly schedule the next animation callback at the beginning of the\n          // frame. If the scheduler queue is not empty at the end of the frame, it\n          // will continue flushing inside that callback. If the queue *is* empty,\n          // then it will exit immediately. Posting the callback at the start of the\n          // frame ensures it's fired within the earliest possible frame. If we\n          // waited until the end of the frame to post the callback, we risk the\n          // browser skipping a frame and not firing the callback until the frame\n          // after that.\n          requestAnimationFrameWithTimeout(animationTick);\n        } else {\n          // No pending work. Exit.\n          isAnimationFrameScheduled = false;\n          return;\n        }\n        var nextFrameTime = rafTime - frameDeadline + activeFrameTime;\n        if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {\n          if (nextFrameTime < 8) {\n            // Defensive coding. We don't support higher frame rates than 120hz.\n            // If the calculated frame time gets lower than 8, it is probably a bug.\n            nextFrameTime = 8;\n          }\n          // If one frame goes long, then the next one can be short to catch up.\n          // If two frames are short in a row, then that's an indication that we\n          // actually have a higher frame rate than what we're currently optimizing.\n          // We adjust our heuristic dynamically accordingly. For example, if we're\n          // running on 120hz display or 90hz VR display.\n          // Take the max of the two in case one of them was an anomaly due to\n          // missed frame deadlines.\n          activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;\n        } else {\n          previousFrameTime = nextFrameTime;\n        }\n        frameDeadline = rafTime + activeFrameTime;\n        if (!isMessageEventScheduled) {\n          isMessageEventScheduled = true;\n          window.postMessage(messageKey, '*');\n        }\n      };\n      requestHostCallback = function (callback, absoluteTimeout) {\n        scheduledHostCallback = callback;\n        timeoutTime = absoluteTimeout;\n        if (isFlushingHostCallback || absoluteTimeout < 0) {\n          // Don't wait for the next frame. Continue working ASAP, in a new event.\n          window.postMessage(messageKey, '*');\n        } else if (!isAnimationFrameScheduled) {\n          // If rAF didn't already schedule one, we need to schedule a frame.\n          // TODO: If this rAF doesn't materialize because the browser throttles, we\n          // might want to still have setTimeout trigger rIC as a backup to ensure\n          // that we keep performing work.\n          isAnimationFrameScheduled = true;\n          requestAnimationFrameWithTimeout(animationTick);\n        }\n      };\n      cancelHostCallback = function () {\n        scheduledHostCallback = null;\n        isMessageEventScheduled = false;\n        timeoutTime = -1;\n      };\n    }\n    exports.unstable_ImmediatePriority = ImmediatePriority;\n    exports.unstable_UserBlockingPriority = UserBlockingPriority;\n    exports.unstable_NormalPriority = NormalPriority;\n    exports.unstable_IdlePriority = IdlePriority;\n    exports.unstable_runWithPriority = unstable_runWithPriority;\n    exports.unstable_scheduleCallback = unstable_scheduleCallback;\n    exports.unstable_cancelCallback = unstable_cancelCallback;\n    exports.unstable_wrapCallback = unstable_wrapCallback;\n    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\n  })();\n}","map":{"version":3,"names":["process","env","NODE_ENV","Object","defineProperty","exports","value","ImmediatePriority","UserBlockingPriority","NormalPriority","IdlePriority","maxSigned31BitInt","IMMEDIATE_PRIORITY_TIMEOUT","USER_BLOCKING_PRIORITY","NORMAL_PRIORITY_TIMEOUT","IDLE_PRIORITY","firstCallbackNode","currentPriorityLevel","currentEventStartTime","currentExpirationTime","isExecutingCallback","isHostCallbackScheduled","hasNativePerformanceNow","performance","now","timeRemaining","expirationTime","remaining","getFrameDeadline","Date","deadlineObject","didTimeout","ensureHostCallbackIsScheduled","cancelHostCallback","requestHostCallback","flushWork","flushFirstCallback","flushedNode","next","lastCallbackNode","previous","callback","priorityLevel","previousPriorityLevel","previousExpirationTime","continuationCallback","continuationNode","nextAfterContinuation","node","flushImmediateWork","currentTime","unstable_now","unstable_runWithPriority","eventHandler","previousEventStartTime","unstable_wrapCallback","parentPriorityLevel","apply","arguments","unstable_scheduleCallback","deprecated_options","startTime","timeout","newNode","unstable_cancelCallback","callbackNode","unstable_getCurrentPriorityLevel","localDate","localSetTimeout","setTimeout","undefined","localClearTimeout","clearTimeout","localRequestAnimationFrame","requestAnimationFrame","localCancelAnimationFrame","cancelAnimationFrame","ANIMATION_FRAME_TIMEOUT","rAFID","rAFTimeoutID","requestAnimationFrameWithTimeout","timestamp","Performance","window","_schedMock","impl","addEventListener","_callback","_currentTime","_flushCallback","ms","cb","Infinity","console","error","scheduledHostCallback","isMessageEventScheduled","timeoutTime","isAnimationFrameScheduled","isFlushingHostCallback","frameDeadline","previousFrameTime","activeFrameTime","messageKey","Math","random","toString","slice","idleTick","event","source","data","prevScheduledCallback","prevTimeoutTime","animationTick","rafTime","nextFrameTime","postMessage","absoluteTimeout","unstable_ImmediatePriority","unstable_UserBlockingPriority","unstable_NormalPriority","unstable_IdlePriority"],"sources":["D:/nm/nm_portfolio/node_modules/scheduler/cjs/scheduler.development.js"],"sourcesContent":["/** @license React v16.6.0\r\n * scheduler.development.js\r\n *\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n'use strict';\r\n\r\n\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  (function() {\r\n'use strict';\r\n\r\nObject.defineProperty(exports, '__esModule', { value: true });\r\n\r\n/* eslint-disable no-var */\r\n\r\n// TODO: Use symbols?\r\nvar ImmediatePriority = 1;\r\nvar UserBlockingPriority = 2;\r\nvar NormalPriority = 3;\r\nvar IdlePriority = 4;\r\n\r\n// Max 31 bit integer. The max integer size in V8 for 32-bit systems.\r\n// Math.pow(2, 30) - 1\r\n// 0b111111111111111111111111111111\r\nvar maxSigned31BitInt = 1073741823;\r\n\r\n// Times out immediately\r\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1;\r\n// Eventually times out\r\nvar USER_BLOCKING_PRIORITY = 250;\r\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\r\n// Never times out\r\nvar IDLE_PRIORITY = maxSigned31BitInt;\r\n\r\n// Callbacks are stored as a circular, doubly linked list.\r\nvar firstCallbackNode = null;\r\n\r\nvar currentPriorityLevel = NormalPriority;\r\nvar currentEventStartTime = -1;\r\nvar currentExpirationTime = -1;\r\n\r\n// This is set when a callback is being executed, to prevent re-entrancy.\r\nvar isExecutingCallback = false;\r\n\r\nvar isHostCallbackScheduled = false;\r\n\r\nvar hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\r\n\r\nvar timeRemaining;\r\nif (hasNativePerformanceNow) {\r\n  timeRemaining = function () {\r\n    if (firstCallbackNode !== null && firstCallbackNode.expirationTime < currentExpirationTime) {\r\n      // A higher priority callback was scheduled. Yield so we can switch to\r\n      // working on that.\r\n      return 0;\r\n    }\r\n    // We assume that if we have a performance timer that the rAF callback\r\n    // gets a performance timer value. Not sure if this is always true.\r\n    var remaining = getFrameDeadline() - performance.now();\r\n    return remaining > 0 ? remaining : 0;\r\n  };\r\n} else {\r\n  timeRemaining = function () {\r\n    // Fallback to Date.now()\r\n    if (firstCallbackNode !== null && firstCallbackNode.expirationTime < currentExpirationTime) {\r\n      return 0;\r\n    }\r\n    var remaining = getFrameDeadline() - Date.now();\r\n    return remaining > 0 ? remaining : 0;\r\n  };\r\n}\r\n\r\nvar deadlineObject = {\r\n  timeRemaining: timeRemaining,\r\n  didTimeout: false\r\n};\r\n\r\nfunction ensureHostCallbackIsScheduled() {\r\n  if (isExecutingCallback) {\r\n    // Don't schedule work yet; wait until the next time we yield.\r\n    return;\r\n  }\r\n  // Schedule the host callback using the earliest expiration in the list.\r\n  var expirationTime = firstCallbackNode.expirationTime;\r\n  if (!isHostCallbackScheduled) {\r\n    isHostCallbackScheduled = true;\r\n  } else {\r\n    // Cancel the existing host callback.\r\n    cancelHostCallback();\r\n  }\r\n  requestHostCallback(flushWork, expirationTime);\r\n}\r\n\r\nfunction flushFirstCallback() {\r\n  var flushedNode = firstCallbackNode;\r\n\r\n  // Remove the node from the list before calling the callback. That way the\r\n  // list is in a consistent state even if the callback throws.\r\n  var next = firstCallbackNode.next;\r\n  if (firstCallbackNode === next) {\r\n    // This is the last callback in the list.\r\n    firstCallbackNode = null;\r\n    next = null;\r\n  } else {\r\n    var lastCallbackNode = firstCallbackNode.previous;\r\n    firstCallbackNode = lastCallbackNode.next = next;\r\n    next.previous = lastCallbackNode;\r\n  }\r\n\r\n  flushedNode.next = flushedNode.previous = null;\r\n\r\n  // Now it's safe to call the callback.\r\n  var callback = flushedNode.callback;\r\n  var expirationTime = flushedNode.expirationTime;\r\n  var priorityLevel = flushedNode.priorityLevel;\r\n  var previousPriorityLevel = currentPriorityLevel;\r\n  var previousExpirationTime = currentExpirationTime;\r\n  currentPriorityLevel = priorityLevel;\r\n  currentExpirationTime = expirationTime;\r\n  var continuationCallback;\r\n  try {\r\n    continuationCallback = callback(deadlineObject);\r\n  } finally {\r\n    currentPriorityLevel = previousPriorityLevel;\r\n    currentExpirationTime = previousExpirationTime;\r\n  }\r\n\r\n  // A callback may return a continuation. The continuation should be scheduled\r\n  // with the same priority and expiration as the just-finished callback.\r\n  if (typeof continuationCallback === 'function') {\r\n    var continuationNode = {\r\n      callback: continuationCallback,\r\n      priorityLevel: priorityLevel,\r\n      expirationTime: expirationTime,\r\n      next: null,\r\n      previous: null\r\n    };\r\n\r\n    // Insert the new callback into the list, sorted by its expiration. This is\r\n    // almost the same as the code in `scheduleCallback`, except the callback\r\n    // is inserted into the list *before* callbacks of equal expiration instead\r\n    // of after.\r\n    if (firstCallbackNode === null) {\r\n      // This is the first callback in the list.\r\n      firstCallbackNode = continuationNode.next = continuationNode.previous = continuationNode;\r\n    } else {\r\n      var nextAfterContinuation = null;\r\n      var node = firstCallbackNode;\r\n      do {\r\n        if (node.expirationTime >= expirationTime) {\r\n          // This callback expires at or after the continuation. We will insert\r\n          // the continuation *before* this callback.\r\n          nextAfterContinuation = node;\r\n          break;\r\n        }\r\n        node = node.next;\r\n      } while (node !== firstCallbackNode);\r\n\r\n      if (nextAfterContinuation === null) {\r\n        // No equal or lower priority callback was found, which means the new\r\n        // callback is the lowest priority callback in the list.\r\n        nextAfterContinuation = firstCallbackNode;\r\n      } else if (nextAfterContinuation === firstCallbackNode) {\r\n        // The new callback is the highest priority callback in the list.\r\n        firstCallbackNode = continuationNode;\r\n        ensureHostCallbackIsScheduled();\r\n      }\r\n\r\n      var previous = nextAfterContinuation.previous;\r\n      previous.next = nextAfterContinuation.previous = continuationNode;\r\n      continuationNode.next = nextAfterContinuation;\r\n      continuationNode.previous = previous;\r\n    }\r\n  }\r\n}\r\n\r\nfunction flushImmediateWork() {\r\n  if (\r\n  // Confirm we've exited the outer most event handler\r\n  currentEventStartTime === -1 && firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority) {\r\n    isExecutingCallback = true;\r\n    deadlineObject.didTimeout = true;\r\n    try {\r\n      do {\r\n        flushFirstCallback();\r\n      } while (\r\n      // Keep flushing until there are no more immediate callbacks\r\n      firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority);\r\n    } finally {\r\n      isExecutingCallback = false;\r\n      if (firstCallbackNode !== null) {\r\n        // There's still work remaining. Request another callback.\r\n        ensureHostCallbackIsScheduled();\r\n      } else {\r\n        isHostCallbackScheduled = false;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction flushWork(didTimeout) {\r\n  isExecutingCallback = true;\r\n  deadlineObject.didTimeout = didTimeout;\r\n  try {\r\n    if (didTimeout) {\r\n      // Flush all the expired callbacks without yielding.\r\n      while (firstCallbackNode !== null) {\r\n        // Read the current time. Flush all the callbacks that expire at or\r\n        // earlier than that time. Then read the current time again and repeat.\r\n        // This optimizes for as few performance.now calls as possible.\r\n        var currentTime = exports.unstable_now();\r\n        if (firstCallbackNode.expirationTime <= currentTime) {\r\n          do {\r\n            flushFirstCallback();\r\n          } while (firstCallbackNode !== null && firstCallbackNode.expirationTime <= currentTime);\r\n          continue;\r\n        }\r\n        break;\r\n      }\r\n    } else {\r\n      // Keep flushing callbacks until we run out of time in the frame.\r\n      if (firstCallbackNode !== null) {\r\n        do {\r\n          flushFirstCallback();\r\n        } while (firstCallbackNode !== null && getFrameDeadline() - exports.unstable_now() > 0);\r\n      }\r\n    }\r\n  } finally {\r\n    isExecutingCallback = false;\r\n    if (firstCallbackNode !== null) {\r\n      // There's still work remaining. Request another callback.\r\n      ensureHostCallbackIsScheduled();\r\n    } else {\r\n      isHostCallbackScheduled = false;\r\n    }\r\n    // Before exiting, flush all the immediate work that was scheduled.\r\n    flushImmediateWork();\r\n  }\r\n}\r\n\r\nfunction unstable_runWithPriority(priorityLevel, eventHandler) {\r\n  switch (priorityLevel) {\r\n    case ImmediatePriority:\r\n    case UserBlockingPriority:\r\n    case NormalPriority:\r\n    case IdlePriority:\r\n      break;\r\n    default:\r\n      priorityLevel = NormalPriority;\r\n  }\r\n\r\n  var previousPriorityLevel = currentPriorityLevel;\r\n  var previousEventStartTime = currentEventStartTime;\r\n  currentPriorityLevel = priorityLevel;\r\n  currentEventStartTime = exports.unstable_now();\r\n\r\n  try {\r\n    return eventHandler();\r\n  } finally {\r\n    currentPriorityLevel = previousPriorityLevel;\r\n    currentEventStartTime = previousEventStartTime;\r\n\r\n    // Before exiting, flush all the immediate work that was scheduled.\r\n    flushImmediateWork();\r\n  }\r\n}\r\n\r\nfunction unstable_wrapCallback(callback) {\r\n  var parentPriorityLevel = currentPriorityLevel;\r\n  return function () {\r\n    // This is a fork of runWithPriority, inlined for performance.\r\n    var previousPriorityLevel = currentPriorityLevel;\r\n    var previousEventStartTime = currentEventStartTime;\r\n    currentPriorityLevel = parentPriorityLevel;\r\n    currentEventStartTime = exports.unstable_now();\r\n\r\n    try {\r\n      return callback.apply(this, arguments);\r\n    } finally {\r\n      currentPriorityLevel = previousPriorityLevel;\r\n      currentEventStartTime = previousEventStartTime;\r\n      flushImmediateWork();\r\n    }\r\n  };\r\n}\r\n\r\nfunction unstable_scheduleCallback(callback, deprecated_options) {\r\n  var startTime = currentEventStartTime !== -1 ? currentEventStartTime : exports.unstable_now();\r\n\r\n  var expirationTime;\r\n  if (typeof deprecated_options === 'object' && deprecated_options !== null && typeof deprecated_options.timeout === 'number') {\r\n    // FIXME: Remove this branch once we lift expiration times out of React.\r\n    expirationTime = startTime + deprecated_options.timeout;\r\n  } else {\r\n    switch (currentPriorityLevel) {\r\n      case ImmediatePriority:\r\n        expirationTime = startTime + IMMEDIATE_PRIORITY_TIMEOUT;\r\n        break;\r\n      case UserBlockingPriority:\r\n        expirationTime = startTime + USER_BLOCKING_PRIORITY;\r\n        break;\r\n      case IdlePriority:\r\n        expirationTime = startTime + IDLE_PRIORITY;\r\n        break;\r\n      case NormalPriority:\r\n      default:\r\n        expirationTime = startTime + NORMAL_PRIORITY_TIMEOUT;\r\n    }\r\n  }\r\n\r\n  var newNode = {\r\n    callback: callback,\r\n    priorityLevel: currentPriorityLevel,\r\n    expirationTime: expirationTime,\r\n    next: null,\r\n    previous: null\r\n  };\r\n\r\n  // Insert the new callback into the list, ordered first by expiration, then\r\n  // by insertion. So the new callback is inserted any other callback with\r\n  // equal expiration.\r\n  if (firstCallbackNode === null) {\r\n    // This is the first callback in the list.\r\n    firstCallbackNode = newNode.next = newNode.previous = newNode;\r\n    ensureHostCallbackIsScheduled();\r\n  } else {\r\n    var next = null;\r\n    var node = firstCallbackNode;\r\n    do {\r\n      if (node.expirationTime > expirationTime) {\r\n        // The new callback expires before this one.\r\n        next = node;\r\n        break;\r\n      }\r\n      node = node.next;\r\n    } while (node !== firstCallbackNode);\r\n\r\n    if (next === null) {\r\n      // No callback with a later expiration was found, which means the new\r\n      // callback has the latest expiration in the list.\r\n      next = firstCallbackNode;\r\n    } else if (next === firstCallbackNode) {\r\n      // The new callback has the earliest expiration in the entire list.\r\n      firstCallbackNode = newNode;\r\n      ensureHostCallbackIsScheduled();\r\n    }\r\n\r\n    var previous = next.previous;\r\n    previous.next = next.previous = newNode;\r\n    newNode.next = next;\r\n    newNode.previous = previous;\r\n  }\r\n\r\n  return newNode;\r\n}\r\n\r\nfunction unstable_cancelCallback(callbackNode) {\r\n  var next = callbackNode.next;\r\n  if (next === null) {\r\n    // Already cancelled.\r\n    return;\r\n  }\r\n\r\n  if (next === callbackNode) {\r\n    // This is the only scheduled callback. Clear the list.\r\n    firstCallbackNode = null;\r\n  } else {\r\n    // Remove the callback from its position in the list.\r\n    if (callbackNode === firstCallbackNode) {\r\n      firstCallbackNode = next;\r\n    }\r\n    var previous = callbackNode.previous;\r\n    previous.next = next;\r\n    next.previous = previous;\r\n  }\r\n\r\n  callbackNode.next = callbackNode.previous = null;\r\n}\r\n\r\nfunction unstable_getCurrentPriorityLevel() {\r\n  return currentPriorityLevel;\r\n}\r\n\r\n// The remaining code is essentially a polyfill for requestIdleCallback. It\r\n// works by scheduling a requestAnimationFrame, storing the time for the start\r\n// of the frame, then scheduling a postMessage which gets scheduled after paint.\r\n// Within the postMessage handler do as much work as possible until time + frame\r\n// rate. By separating the idle call into a separate event tick we ensure that\r\n// layout, paint and other browser work is counted against the available time.\r\n// The frame rate is dynamically adjusted.\r\n\r\n// We capture a local reference to any global, in case it gets polyfilled after\r\n// this module is initially evaluated. We want to be using a\r\n// consistent implementation.\r\nvar localDate = Date;\r\n\r\n// This initialization code may run even on server environments if a component\r\n// just imports ReactDOM (e.g. for findDOMNode). Some environments might not\r\n// have setTimeout or clearTimeout. However, we always expect them to be defined\r\n// on the client. https://github.com/facebook/react/pull/13088\r\nvar localSetTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;\r\nvar localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;\r\n\r\n// We don't expect either of these to necessarily be defined, but we will error\r\n// later if they are missing on the client.\r\nvar localRequestAnimationFrame = typeof requestAnimationFrame === 'function' ? requestAnimationFrame : undefined;\r\nvar localCancelAnimationFrame = typeof cancelAnimationFrame === 'function' ? cancelAnimationFrame : undefined;\r\n\r\n// requestAnimationFrame does not run when the tab is in the background. If\r\n// we're backgrounded we prefer for that work to happen so that the page\r\n// continues to load in the background. So we also schedule a 'setTimeout' as\r\n// a fallback.\r\n// TODO: Need a better heuristic for backgrounded work.\r\nvar ANIMATION_FRAME_TIMEOUT = 100;\r\nvar rAFID;\r\nvar rAFTimeoutID;\r\nvar requestAnimationFrameWithTimeout = function (callback) {\r\n  // schedule rAF and also a setTimeout\r\n  rAFID = localRequestAnimationFrame(function (timestamp) {\r\n    // cancel the setTimeout\r\n    localClearTimeout(rAFTimeoutID);\r\n    callback(timestamp);\r\n  });\r\n  rAFTimeoutID = localSetTimeout(function () {\r\n    // cancel the requestAnimationFrame\r\n    localCancelAnimationFrame(rAFID);\r\n    callback(exports.unstable_now());\r\n  }, ANIMATION_FRAME_TIMEOUT);\r\n};\r\n\r\nif (hasNativePerformanceNow) {\r\n  var Performance = performance;\r\n  exports.unstable_now = function () {\r\n    return Performance.now();\r\n  };\r\n} else {\r\n  exports.unstable_now = function () {\r\n    return localDate.now();\r\n  };\r\n}\r\n\r\nvar requestHostCallback;\r\nvar cancelHostCallback;\r\nvar getFrameDeadline;\r\n\r\nif (typeof window !== 'undefined' && window._schedMock) {\r\n  // Dynamic injection, only for testing purposes.\r\n  var impl = window._schedMock;\r\n  requestHostCallback = impl[0];\r\n  cancelHostCallback = impl[1];\r\n  getFrameDeadline = impl[2];\r\n} else if (\r\n// If Scheduler runs in a non-DOM environment, it falls back to a naive\r\n// implementation using setTimeout.\r\ntypeof window === 'undefined' ||\r\n// \"addEventListener\" might not be available on the window object\r\n// if this is a mocked \"window\" object. So we need to validate that too.\r\ntypeof window.addEventListener !== 'function') {\r\n  var _callback = null;\r\n  var _currentTime = -1;\r\n  var _flushCallback = function (didTimeout, ms) {\r\n    if (_callback !== null) {\r\n      var cb = _callback;\r\n      _callback = null;\r\n      try {\r\n        _currentTime = ms;\r\n        cb(didTimeout);\r\n      } finally {\r\n        _currentTime = -1;\r\n      }\r\n    }\r\n  };\r\n  requestHostCallback = function (cb, ms) {\r\n    if (_currentTime !== -1) {\r\n      // Protect against re-entrancy.\r\n      setTimeout(requestHostCallback, 0, cb, ms);\r\n    } else {\r\n      _callback = cb;\r\n      setTimeout(_flushCallback, ms, true, ms);\r\n      setTimeout(_flushCallback, maxSigned31BitInt, false, maxSigned31BitInt);\r\n    }\r\n  };\r\n  cancelHostCallback = function () {\r\n    _callback = null;\r\n  };\r\n  getFrameDeadline = function () {\r\n    return Infinity;\r\n  };\r\n  exports.unstable_now = function () {\r\n    return _currentTime === -1 ? 0 : _currentTime;\r\n  };\r\n} else {\r\n  if (typeof console !== 'undefined') {\r\n    // TODO: Remove fb.me link\r\n    if (typeof localRequestAnimationFrame !== 'function') {\r\n      console.error(\"This browser doesn't support requestAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\r\n    }\r\n    if (typeof localCancelAnimationFrame !== 'function') {\r\n      console.error(\"This browser doesn't support cancelAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\r\n    }\r\n  }\r\n\r\n  var scheduledHostCallback = null;\r\n  var isMessageEventScheduled = false;\r\n  var timeoutTime = -1;\r\n\r\n  var isAnimationFrameScheduled = false;\r\n\r\n  var isFlushingHostCallback = false;\r\n\r\n  var frameDeadline = 0;\r\n  // We start out assuming that we run at 30fps but then the heuristic tracking\r\n  // will adjust this value to a faster fps if we get more frequent animation\r\n  // frames.\r\n  var previousFrameTime = 33;\r\n  var activeFrameTime = 33;\r\n\r\n  getFrameDeadline = function () {\r\n    return frameDeadline;\r\n  };\r\n\r\n  // We use the postMessage trick to defer idle work until after the repaint.\r\n  var messageKey = '__reactIdleCallback$' + Math.random().toString(36).slice(2);\r\n  var idleTick = function (event) {\r\n    if (event.source !== window || event.data !== messageKey) {\r\n      return;\r\n    }\r\n\r\n    isMessageEventScheduled = false;\r\n\r\n    var prevScheduledCallback = scheduledHostCallback;\r\n    var prevTimeoutTime = timeoutTime;\r\n    scheduledHostCallback = null;\r\n    timeoutTime = -1;\r\n\r\n    var currentTime = exports.unstable_now();\r\n\r\n    var didTimeout = false;\r\n    if (frameDeadline - currentTime <= 0) {\r\n      // There's no time left in this idle period. Check if the callback has\r\n      // a timeout and whether it's been exceeded.\r\n      if (prevTimeoutTime !== -1 && prevTimeoutTime <= currentTime) {\r\n        // Exceeded the timeout. Invoke the callback even though there's no\r\n        // time left.\r\n        didTimeout = true;\r\n      } else {\r\n        // No timeout.\r\n        if (!isAnimationFrameScheduled) {\r\n          // Schedule another animation callback so we retry later.\r\n          isAnimationFrameScheduled = true;\r\n          requestAnimationFrameWithTimeout(animationTick);\r\n        }\r\n        // Exit without invoking the callback.\r\n        scheduledHostCallback = prevScheduledCallback;\r\n        timeoutTime = prevTimeoutTime;\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (prevScheduledCallback !== null) {\r\n      isFlushingHostCallback = true;\r\n      try {\r\n        prevScheduledCallback(didTimeout);\r\n      } finally {\r\n        isFlushingHostCallback = false;\r\n      }\r\n    }\r\n  };\r\n  // Assumes that we have addEventListener in this environment. Might need\r\n  // something better for old IE.\r\n  window.addEventListener('message', idleTick, false);\r\n\r\n  var animationTick = function (rafTime) {\r\n    if (scheduledHostCallback !== null) {\r\n      // Eagerly schedule the next animation callback at the beginning of the\r\n      // frame. If the scheduler queue is not empty at the end of the frame, it\r\n      // will continue flushing inside that callback. If the queue *is* empty,\r\n      // then it will exit immediately. Posting the callback at the start of the\r\n      // frame ensures it's fired within the earliest possible frame. If we\r\n      // waited until the end of the frame to post the callback, we risk the\r\n      // browser skipping a frame and not firing the callback until the frame\r\n      // after that.\r\n      requestAnimationFrameWithTimeout(animationTick);\r\n    } else {\r\n      // No pending work. Exit.\r\n      isAnimationFrameScheduled = false;\r\n      return;\r\n    }\r\n\r\n    var nextFrameTime = rafTime - frameDeadline + activeFrameTime;\r\n    if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {\r\n      if (nextFrameTime < 8) {\r\n        // Defensive coding. We don't support higher frame rates than 120hz.\r\n        // If the calculated frame time gets lower than 8, it is probably a bug.\r\n        nextFrameTime = 8;\r\n      }\r\n      // If one frame goes long, then the next one can be short to catch up.\r\n      // If two frames are short in a row, then that's an indication that we\r\n      // actually have a higher frame rate than what we're currently optimizing.\r\n      // We adjust our heuristic dynamically accordingly. For example, if we're\r\n      // running on 120hz display or 90hz VR display.\r\n      // Take the max of the two in case one of them was an anomaly due to\r\n      // missed frame deadlines.\r\n      activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;\r\n    } else {\r\n      previousFrameTime = nextFrameTime;\r\n    }\r\n    frameDeadline = rafTime + activeFrameTime;\r\n    if (!isMessageEventScheduled) {\r\n      isMessageEventScheduled = true;\r\n      window.postMessage(messageKey, '*');\r\n    }\r\n  };\r\n\r\n  requestHostCallback = function (callback, absoluteTimeout) {\r\n    scheduledHostCallback = callback;\r\n    timeoutTime = absoluteTimeout;\r\n    if (isFlushingHostCallback || absoluteTimeout < 0) {\r\n      // Don't wait for the next frame. Continue working ASAP, in a new event.\r\n      window.postMessage(messageKey, '*');\r\n    } else if (!isAnimationFrameScheduled) {\r\n      // If rAF didn't already schedule one, we need to schedule a frame.\r\n      // TODO: If this rAF doesn't materialize because the browser throttles, we\r\n      // might want to still have setTimeout trigger rIC as a backup to ensure\r\n      // that we keep performing work.\r\n      isAnimationFrameScheduled = true;\r\n      requestAnimationFrameWithTimeout(animationTick);\r\n    }\r\n  };\r\n\r\n  cancelHostCallback = function () {\r\n    scheduledHostCallback = null;\r\n    isMessageEventScheduled = false;\r\n    timeoutTime = -1;\r\n  };\r\n}\r\n\r\nexports.unstable_ImmediatePriority = ImmediatePriority;\r\nexports.unstable_UserBlockingPriority = UserBlockingPriority;\r\nexports.unstable_NormalPriority = NormalPriority;\r\nexports.unstable_IdlePriority = IdlePriority;\r\nexports.unstable_runWithPriority = unstable_runWithPriority;\r\nexports.unstable_scheduleCallback = unstable_scheduleCallback;\r\nexports.unstable_cancelCallback = unstable_cancelCallback;\r\nexports.unstable_wrapCallback = unstable_wrapCallback;\r\nexports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\r\n  })();\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}